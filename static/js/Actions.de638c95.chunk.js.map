{"version":3,"sources":["components/actions.js"],"names":["Updates","lazy","React","memo","setDate","dates","useState","showUpdates","setShowUpdates","useLocalStorage","newUpdate","setNewUpdate","lastViewedLog","setLastViewedLog","isTimelineMode","setIsTimelineMode","updates","useSWR","fetcher","revalidateOnFocus","data","useEffect","undefined","lastTimestamp","slice","reverse","timestamp","Fragment","ActionsPanel","fallback","prevProps","currProps","today","Date","selectedDate","setSelectedDate","minDate","maxDate","t","useTranslation","BellOff","useMemo","onClick","useSpring","opacity","transform","config","mass","tension","friction","trail","useTrail","from","to","stiff","div","className","style","interpolate","o","pointerEvents","h5","value","calendarIcon","size","clearIcon","format","onChange","date","color"],"mappings":"0PAYMA,EAAUC,gBAAK,kBACnB,kCAwDaC,cAAMC,MArDL,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,MAAW,EACEC,oBAAS,GADX,mBAC7BC,EAD6B,KAChBC,EADgB,OAEFC,YAAgB,aAAa,GAF3B,mBAE7BC,EAF6B,KAElBC,EAFkB,OAGMF,YAAgB,gBAAiB,GAHvC,mBAG7BG,EAH6B,KAGdC,EAHc,OAIQP,oBAAS,GAJjB,mBAI7BQ,EAJ6B,KAIbC,EAJa,KAMvBC,EAAWC,YACtB,kDACAC,IACA,CACEC,mBAAmB,IAJhBC,KAkBP,OAVAC,qBAAU,WACR,QAAgBC,IAAZN,EAAuB,CACzB,IAAMO,EAAyD,IAAzCP,EAAQQ,QAAQC,UAAU,GAAGC,UAC/CH,IAAkBX,IACpBD,GAAa,GACbE,EAAiBU,OAGpB,CAACX,EAAeI,EAASH,EAAkBF,IAG5C,kBAAC,IAAMgB,SAAP,KACE,kBAACC,EACK,CACFhB,gBACAF,YACAI,iBACAC,oBACAR,cACAH,UACAC,QACAM,eACAH,mBAIHD,GACC,kBAAC,WAAD,CAAUsB,SAAU,+BAClB,kBAAC7B,EAAY,CAACgB,iBAOR,SAACc,EAAWC,GAC1B,OAAO,KAKT,IAAMH,EAAe,SAAC,GAUhB,EATJhB,cASI,EARJF,UAQK,IAPLI,EAOI,EAPJA,eAEAP,GAKI,EANJQ,kBAMI,EALJR,aACAH,EAII,EAJJA,QAGAI,GACI,EAHJH,MAGI,EAFJM,aAEI,EADJH,gBAEMwB,EAAQ,IAAIC,KADd,EAEoC3B,mBAAS0B,GAF7C,mBAEGE,EAFH,KAEiBC,EAFjB,KAGEC,EAAU,IAAIH,KAAK,eACnBI,EAAU,IAAIJ,KAAK,eAClBK,EAAKC,cAALD,EAcDE,EAAUC,mBACd,kBACE,kBAAC,IAAD,CACEC,QAAS,WACPlC,GAAgBD,QAItB,CAACC,EAAgBD,IA3Bf,EA8ByBoC,YAAU,CACrCC,QAAS9B,EAAiB,EAAI,EAC9B+B,UAAU,8BAAD,OAAgC/B,EAAiB,IAAM,EAAvD,QACTgC,OAAQ,CAACC,KAAM,EAAGC,QAAS,IAAKC,SAAU,MAHrCJ,EA9BH,EA8BGA,UAAWD,EA9Bd,EA8BcA,QAMZM,EAAQC,YAAS,EAAG,CACxBC,KAAM,CAACP,UAAW,0BAA2BD,QAAS,GACtDS,GAAI,CACFR,UAAW,yBACXD,QAAS,GAEXE,OAAQA,IAAOQ,QAGjB,OACE,kBAAC,IAAM3B,SAAP,KACE,kBAAC,IAAS4B,IAAV,CACEC,UAAU,UACVC,MAAO,CACLb,QAASA,EAAQc,aAAY,SAACC,GAAD,OAAO,EAAIA,KACxCd,YACAe,cAAe9C,EAAiB,OAAS,KAG1CP,GAAeiC,EAChB,kBAAC,IAASqB,GAAV,CAAaJ,MAAOP,EAAM,IAAKZ,EAAE,iBAAjC,KACA,kBAAC,IAASiB,IAAV,CAAcC,UAAU,eACtB,kBAAC,IAAD,CACEM,MAAO5B,EACPE,QAASA,EACTC,QAASA,EACT0B,aAAc,kBAAC,IAAD,CAAeC,KAAM,KACnCC,UAAW,kBAAC,IAAD,MACXC,OAAO,UACPC,SAAU,SAACC,GACThE,EAAQ8D,YAAOE,EAAM,eACrBjC,EAAgBiC,OAYtB,kBAAC,IAASb,IAAV,KACE,kBAAC,IAAD,CAAiBS,KAAM,GAAIK,MAAM","file":"static/js/Actions.de638c95.chunk.js","sourcesContent":["import {fetcher} from '../utils/commonfunctions';\n\nimport {format} from 'date-fns';\nimport React, {useMemo, useState, useEffect, lazy, Suspense} from 'react';\nimport DatePicker from 'react-date-picker';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {FaHandPointLeft} from 'react-icons/fa';\nimport {useSpring, animated, useTrail, config} from 'react-spring';\nimport {useLocalStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst Updates = lazy(() =>\n  import('./updates' /* webpackChunkName: \"Updates\" */)\n);\n\nconst Actions = ({setDate, dates}) => {\n  const [showUpdates, setShowUpdates] = useState(false);\n  const [newUpdate, setNewUpdate] = useLocalStorage('newUpdate', false);\n  const [lastViewedLog, setLastViewedLog] = useLocalStorage('lastViewedLog', 0);\n  const [isTimelineMode, setIsTimelineMode] = useState(false);\n\n  const {data: updates} = useSWR(\n    'https://api.covid19india.org/updatelog/log.json',\n    fetcher,\n    {\n      revalidateOnFocus: false,\n    }\n  );\n\n  useEffect(() => {\n    if (updates !== undefined) {\n      const lastTimestamp = updates.slice().reverse()[0].timestamp * 1000;\n      if (lastTimestamp !== lastViewedLog) {\n        setNewUpdate(true);\n        setLastViewedLog(lastTimestamp);\n      }\n    }\n  }, [lastViewedLog, updates, setLastViewedLog, setNewUpdate]);\n\n  return (\n    <React.Fragment>\n      <ActionsPanel\n        {...{\n          lastViewedLog,\n          newUpdate,\n          isTimelineMode,\n          setIsTimelineMode,\n          showUpdates,\n          setDate,\n          dates,\n          setNewUpdate,\n          setShowUpdates,\n        }}\n      />\n\n      {showUpdates && (\n        <Suspense fallback={<div />}>\n          <Updates {...{updates}} />\n        </Suspense>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  return true;\n};\n\nexport default React.memo(Actions, isEqual);\n\nconst ActionsPanel = ({\n  lastViewedLog,\n  newUpdate,\n  isTimelineMode,\n  setIsTimelineMode,\n  showUpdates,\n  setDate,\n  dates,\n  setNewUpdate,\n  setShowUpdates,\n}) => {\n  const today = new Date();\n  const [selectedDate, setSelectedDate] = useState(today);\n  const minDate = new Date('26-MAR-2020');\n  const maxDate = new Date('30-DEC-2020');\n  const {t} = useTranslation();\n\n  // const Bell = useMemo(\n  //   () => (\n  //     <Icon.Bell\n  //       onClick={() => {\n  //         setShowUpdates(!showUpdates);\n  //         setNewUpdate(false);\n  //       }}\n  //     />\n  //   ),\n  //   [setNewUpdate, setShowUpdates, showUpdates]\n  // );\n\n  const BellOff = useMemo(\n    () => (\n      <Icon.BellOff\n        onClick={() => {\n          setShowUpdates(!showUpdates);\n        }}\n      />\n    ),\n    [setShowUpdates, showUpdates]\n  );\n\n  const {transform, opacity} = useSpring({\n    opacity: isTimelineMode ? 1 : 0,\n    transform: `perspective(600px) rotateX(${isTimelineMode ? 180 : 0}deg)`,\n    config: {mass: 5, tension: 500, friction: 80},\n  });\n\n  const trail = useTrail(3, {\n    from: {transform: 'translate3d(0, 10px, 0)', opacity: 0},\n    to: {\n      transform: 'translate3d(0, 0px, 0)',\n      opacity: 1,\n    },\n    config: config.stiff,\n  });\n\n  return (\n    <React.Fragment>\n      <animated.div\n        className=\"actions\"\n        style={{\n          opacity: opacity.interpolate((o) => 1 - o),\n          transform,\n          pointerEvents: isTimelineMode ? 'none' : '',\n        }}\n      >\n        {showUpdates && BellOff}\n        <animated.h5 style={trail[0]}>{t('Select a date')}:</animated.h5>\n        <animated.div className=\"date-picker\">\n          <DatePicker\n            value={selectedDate}\n            minDate={minDate}\n            maxDate={maxDate}\n            calendarIcon={<Icon.Calendar size={18} />}\n            clearIcon={<Icon.XCircle />}\n            format=\"dd/MM/y\"\n            onChange={(date) => {\n              setDate(format(date, 'yyyy-MM-dd'));\n              setSelectedDate(date);\n            }}\n          />\n        </animated.div>\n\n        {/* {!showUpdates && (\n          <animated.div className=\"bell-icon\" style={trail[1]}>\n            {Bell}\n            {newUpdate && <div className=\"indicator\"></div>}\n          </animated.div>\n        )} */}\n\n        <animated.div>\n          <FaHandPointLeft size={24} color=\"#ec3333\" />\n        </animated.div>\n      </animated.div>\n    </React.Fragment>\n  );\n};\n"],"sourceRoot":""}