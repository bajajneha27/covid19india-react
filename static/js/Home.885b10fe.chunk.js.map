{"version":3,"sources":["components/home.js"],"names":["TimeSeriesExplorer","lazy","MapExplorer","Actions","Table","Minigraph","Footer","Level","yesterday","dt","dtObj","Date","setDate","getDate","format","merge","past","future","today","merged","st","dt_minus_1","k","Home","props","useState","stateCode","districtName","regionHighlighted","setRegionHighlighted","anchor","setAnchor","mapStatistic","setMapStatistic","date","data","setData","timeseries","setTimeseries","t","useTranslation","useMemo","pastTimeseries","axios","get","futureTimeseries","all","then","spread","responses","pastTimeseriesData","futureTimeseriesData","mergedTimeseriesData","ret","hasOwnProperty","homeRightElement","useRef","isVisible","useIsVisible","once","stateCodes","Set","Object","keys","MAP_META","filter","sort","Fragment","name","content","className","fallback","style","minHeight","dates","reverse","ref"],"mappings":"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","file":"static/js/Home.885b10fe.chunk.js","sourcesContent":["import {MAP_META} from '../constants';\n\nimport axios from 'axios';\nimport {format} from 'date-fns';\nimport React, {useState, useRef, lazy, Suspense, useMemo} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {useIsVisible} from 'react-is-visible';\n\nimport 'intersection-observer';\n\nconst TimeSeriesExplorer = lazy(() =>\n  import('./timeseriesexplorer' /* webpackChunkName: \"TimeSeriesExplorer\" */)\n);\n\nconst MapExplorer = lazy(() =>\n  import('./mapexplorer' /* webpackChunkName: \"MapExplorer\" */)\n);\n\nconst Actions = lazy(() =>\n  import('./actions' /* webpackChunkName: \"Actions\" */)\n);\n\nconst Table = lazy(() => import('./table' /* webpackChunkName: \"Table\" */));\n\nconst Minigraph = lazy(() =>\n  import('./minigraph' /* webpackChunkName: \"Minigraph\" */)\n);\n\nconst Footer = lazy(() => import('./footer' /* webpackChunkName: \"Footer\" */));\n\nconst Level = lazy(() => import('./level' /* webpackChunkName: \"Level\" */));\n\nfunction yesterday(dt) {\n  const dtObj = new Date(dt);\n  dtObj.setDate(dtObj.getDate() - 1);\n  return format(dtObj, 'yyyy-MM-dd');\n}\n\nfunction merge(past, future, today) {\n  const merged = {};\n  for (const st in past) {\n    merged[st] = {};\n    for (const dt in past[st]) {\n      if (dt === today) continue;\n      merged[st][dt] = {};\n      merged[st][dt]['delta'] = past[st][dt]['delta'];\n      merged[st][dt]['total'] = past[st][dt]['total'];\n    }\n  }\n  for (const st in future) {\n    for (const dt in future[st]) {\n      if (dt < today) continue;\n      merged[st][dt] = {};\n      const dt_minus_1 = yesterday(dt);\n      merged[st][dt]['delta'] = future[st][dt]['delta'];\n      merged[st][dt]['total'] = {};\n      for (const k in merged[st][dt]['delta']) {\n        merged[st][dt]['total'][k] = merged[st][dt_minus_1]['total'][k] + merged[st][dt]['delta'][k]\n      }\n    }\n  }\n  return merged;\n}\n\nfunction Home(props) {\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: 'TT',\n    districtName: null,\n  });\n\n  const [anchor, setAnchor] = useState(null);\n  const [mapStatistic, setMapStatistic] = useState('active');\n  const today = format(new Date(), 'yyyy-MM-dd');\n  const [date, setDate] = useState(today);\n  const [data, setData] = useState({});\n  const [timeseries, setTimeseries] = useState({});\n  const {t} = useTranslation();\n\n  useMemo(() => {\n    const pastTimeseries = axios.get(\n      'https://api.covid19india.org/v3/min/timeseries.min.json'\n    );\n    const futureTimeseries = axios.get(\n      'https://vics-core.github.io/covid-api/predictions.json'\n    );\n    axios.all([pastTimeseries, futureTimeseries]).then(\n      axios.spread((...responses) => {\n        const pastTimeseriesData = responses[0].data;\n        const futureTimeseriesData = responses[1].data;\n        \n        const mergedTimeseriesData = merge(pastTimeseriesData, futureTimeseriesData, today);\n        setTimeseries(mergedTimeseriesData);\n      })\n    );\n  }, [today]);\n\n  useMemo(() => {\n    let ret = {};\n    for (const st in timeseries) {\n      if (timeseries.hasOwnProperty(st)) {\n        ret[st] = timeseries[st][date];\n      }\n    }\n    setData(ret);\n  }, [date, timeseries]);\n\n  const homeRightElement = useRef();\n  const isVisible = useIsVisible(homeRightElement, {once: true});\n\n  const stateCodes = [\n    'TT',\n    ...[\n      ...new Set([\n        ...Object.keys(MAP_META).filter((stateCode) => stateCode !== 'TT'),\n        ...Object.keys(data || {}).filter((stateCode) => stateCode !== 'TT'),\n      ]),\n    ].sort(),\n  ];\n\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>Coronavirus Projections for India - seva.ml</title>\n        <meta name=\"title\" content=\"Coronavirus Projections for India\" />\n      </Helmet>\n\n      <div className=\"Home\">\n        <div className=\"home-left\">\n          <div className=\"header\">\n            <Suspense fallback={<div />}>\n              <div className=\"Search\">\n                <label>{t('COVID-19 AI Predictions')}</label>\n              </div>\n            </Suspense>\n\n            {timeseries['TT'] && (\n              <Suspense fallback={<div style={{minHeight: '56px'}} />}>\n                <Actions\n                  {...{\n                    setDate,\n                    dates: Object.keys(timeseries['TT']).reverse(),\n                    date,\n                  }}\n                />\n              </Suspense>\n            )}\n          </div>\n\n          {data['TT'] && (\n            <Suspense fallback={<div />}>\n              <Level data={data['TT']} />\n            </Suspense>\n          )}\n\n          <Suspense fallback={<div />}>\n            {timeseries['TT'] && (\n              <Minigraph timeseries={timeseries['TT']} {...{date}} />\n            )}\n          </Suspense>\n\n          <Suspense fallback={<div />}>\n            {data['TT'] && (\n              <Table {...{data, regionHighlighted, setRegionHighlighted}} />\n            )}\n          </Suspense>\n        </div>\n\n        <div className=\"home-right\" ref={homeRightElement}>\n          {isVisible && (\n            <React.Fragment>\n              {data && (\n                <Suspense fallback={<div />}>\n                  <MapExplorer\n                    stateCode=\"TT\"\n                    {...{data}}\n                    {...{mapStatistic, setMapStatistic}}\n                    {...{regionHighlighted, setRegionHighlighted}}\n                    {...{anchor, setAnchor}}\n                  />\n                </Suspense>\n              )}\n\n              {timeseries['TT'] && (\n                <Suspense fallback={<div />}>\n                  <TimeSeriesExplorer\n                    timeseries={timeseries[regionHighlighted.stateCode]}\n                    {...{date, stateCodes}}\n                    {...{regionHighlighted, setRegionHighlighted}}\n                    {...{anchor, setAnchor}}\n                  />\n                </Suspense>\n              )}\n            </React.Fragment>\n          )}\n        </div>\n      </div>\n      {isVisible && (\n        <Suspense fallback={<div />}>\n          <Footer />\n        </Suspense>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n"],"sourceRoot":""}